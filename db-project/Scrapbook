# DROP DATABASE IF EXISTS Company;
CREATE DATABASE IF NOT EXISTS Company;

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS employees;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS employees(
	SSN BIGINT NOT NULL,
	FirstName VARCHAR(20) NOT NULL,
	LastName VARCHAR(20) NOT NULL,
	Addr_StreetName  VARCHAR(20),
	Addr_StreetNo int,
	Addr_PostalCode int,
	Salary int NOT NULL,
	WorkPhoneNumber BIGINT NOT NULL,
	MobilePhoneNumber BIGINT,
	SupervisorSSN BIGINT,
	PRIMARY KEY (SSN),
	FOREIGN KEY (SupervisorSSN) REFERENCES employees(SSN)
);

INSERT INTO employees VALUES(1,'George','Taylor',NULL,NULL,NULL,30000,10,NULL,NULL);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS property_types;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS property_types(
	PropertyTypeID int NOT NULL AUTO_INCREMENT,
	Description VARCHAR(500),
	Rooms int NOT NULL,
	PRIMARY KEY (PropertyTypeID)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS clients;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS clients(
	ClientRegistrationNo int NOT NULL AUTO_INCREMENT,
	FirstName VARCHAR(20) NOT NULL,
	LastName VARCHAR(20) NOT NULL,
	Addr_StreetName  VARCHAR(20),
	Addr_StreetNo int,
	Addr_PostalCode int,
	RegistrationDate DATE NOT NULL,
	MaxRent int,
	RegisteredBy BIGINT,
	PrefferedTypeID int,
	PRIMARY KEY (ClientRegistrationNo),
	FOREIGN KEY (RegisteredBy) REFERENCES employees(SSN),
	FOREIGN KEY (PrefferedTypeID) REFERENCES property_types(PropertyTypeID)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS client_phones;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS client_phones(
	ClientRegistrationNo int NOT NULL,
	PhoneNumber BIGINT NOT NULL,
	PRIMARY KEY (ClientRegistrationNo, PhoneNumber),
	FOREIGN KEY (ClientRegistrationNo) REFERENCES clients(ClientRegistrationNo)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS owners;
SET foreign_key_checks = 1;

CREATE TABLE owners(
	SSN BIGINT NOT NULL,
	Addr_StreetName VARCHAR(20),
	Addr_StreetNo int,
	Addr_PostalCode int,
	PRIMARY KEY (SSN)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS owner_phones;
SET foreign_key_checks = 1;

CREATE TABLE owner_phones(
	PhoneNumber BIGINT NOT NULL,
	SSN BIGINT NOT NULL,
	PRIMARY KEY (PhoneNumber, SSN),
	FOREIGN KEY (SSN) REFERENCES owners(SSN)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS private_owners;
SET foreign_key_checks = 1;

CREATE TABLE private_owners(
	SSN BIGINT NOT NULL,
	FirstName VARCHAR(20) NOT NULL,
	LastName VARCHAR(20) NOT NULL,
	PRIMARY KEY (SSN),
	FOREIGN KEY (SSN) REFERENCES owners(SSN)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS business_owners;
SET foreign_key_checks = 1;

CREATE TABLE business_owners(
	SSN BIGINT NOT NULL,
	BusinessName VARCHAR(50) NOT NULL,
	BusinessType VARCHAR(20),
	ContactFirstName VARCHAR(20),
	ContactLastName VARCHAR(20),
	PRIMARY KEY (SSN),
	FOREIGN KEY (SSN) REFERENCES owners(SSN)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS properties;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS properties(
	PropertyRegistrationNo int NOT NULL AUTO_INCREMENT,
	Addr_StreetName  VARCHAR(20) NOT NULL,
	Addr_StreetNo int NOT NULL,
	Addr_PostalCode int NOT NULL,
	Size int NOT NULL,
	Rent int NOT NULL,
	Floor int NOT NULL,
	PropertyTypeID int NOT NULL,
	OwnerSSN BIGINT NOT NULL,
	ManagerSSN BIGINT,
	PRIMARY KEY (PropertyRegistrationNo),
	FOREIGN KEY (PropertyTypeID) REFERENCES property_types(PropertyTypeID),
	FOREIGN KEY (OwnerSSN) REFERENCES owners(SSN),
	FOREIGN KEY (ManagerSSN) REFERENCES employees(SSN)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS visits;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS visits(
	ClientRegistrationNo int NOT NULL,
	PropertyRegistrationNo int NOT NULL,
	Date DATE NOT NULL,
	Comments VARCHAR(500),
	
	PRIMARY KEY (ClientRegistrationNo, PropertyRegistrationNo, Date),
	FOREIGN KEY (ClientRegistrationNo) REFERENCES clients(ClientRegistrationNo),
	FOREIGN KEY (PropertyRegistrationNo) REFERENCES properties(PropertyRegistrationNo)
);

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS contracts;
SET foreign_key_checks = 1;

CREATE TABLE IF NOT EXISTS contracts(
	ContractNo int NOT NULL AUTO_INCREMENT,
	Rent int NOT NULL,
	PaymentType VARCHAR(20) NOT NULL,
	RentStart DATE NOT NULL,
	RentFinish DATE NOT NULL,
	ClientRegistrationNo int NOT NULL,
	PropertyRegistrationNo int NOT NULL,
	PRIMARY KEY (ContractNo),
	FOREIGN KEY (ClientRegistrationNo) REFERENCES clients(ClientRegistrationNo),
	FOREIGN KEY (PropertyRegistrationNo) REFERENCES properties(PropertyRegistrationNo)
);


DROP TRIGGER IF EXISTS delete_owners;

CREATE TRIGGER delete_owners
    BEFORE DELETE ON owners 
    FOR EACH ROW 
    BEGIN
    	DELETE FROM owner_phones	
    	WHERE owner_phones.SSN = OLD.SSN;
    	DELETE FROM private_owners	
    	WHERE private_owners.SSN = OLD.SSN;
    	DELETE FROM business_owners	
    	WHERE business_owners.SSN = OLD.SSN;
    	DELETE FROM properties
    	WHERE OwnerSSN = OLD.SSN;
	END;

	
DROP TRIGGER IF EXISTS delete_client;
	
CREATE TRIGGER delete_client
	BEFORE DELETE ON clients
	FOR EACH ROW
	BEGIN
		DELETE FROM client_phones
		WHERE client_phones.ClientRegistrationNo = OLD.ClientRegistrationNo;
		DELETE FROM contracts
		WHERE contracts.ClientRegistrationNo = OLD.ClientRegistrationNo;
		DELETE FROM vistis
		WHERE visits.ClientRegistrationNo = OLD.ClientRegistrationNo;
	END;

	
DROP TRIGGER IF EXISTS delete_employee;
	
CREATE TRIGGER delete_employee
	BEFORE DELETE ON employees
	FOR EACH ROW
	BEGIN
		UPDATE clients
		SET RegisteredBy = NULL
		WHERE clients.RegisteredBy = OLD.SSN;
		#UPDATE employees
		#SET SupervisorSSN = NULL
		#WHERE employees.SupervisorSSN = OLD.SSN;
		UPDATE properties
		SET ManagerSSN = NULL
		WHERE properties.ManagerSSN = OLD.SSN;
	END;


DROP TRIGGER IF EXISTS delete_properties;
	
CREATE TRIGGER delete_properties
	BEFORE DELETE ON properties
	FOR EACH ROW
	BEGIN
		DELETE FROM contracts
		WHERE contracts.PropertyRegistrationNo = OLD.PropertyRegistrationNo;
		DELETE FROM visits
		WHERE visits.PropertyRegistrationNo = OLD.PropertyRegistrationNo;
	END;


INSERT INTO employees 
VALUES (11111111111, 'George', 'Emp1', 'Nikiforidi', 19, 47217, 25000, 2107724554, 6970055544, NULL);

INSERT INTO employees 
VALUES (54454554656, 'Nick', 'Emp2', 'Papadiamandi', 12, 47230, 20000, 2107721010, 6982455664, 11111111111);

INSERT INTO employees 
VALUES (01259668863, 'John', 'Emp3', 'Sofias Vempo', 4, 35515, 10000, 2107726996, 6944255663, 54454554656);

INSERT INTO employees
VALUES (71172357111, 'Litsa', 'Emp4', 'Sofias Vempo', 6, 35515, 600000, 2107721225, 6946599821, 54454554656);

INSERT INTO employees
VALUES (88888888888, 'Babis', 'Emp5', 'Koletti', 5, 16255, 100000, 2107726656, 6944255663, 54454554656);

INSERT INTO employees
VALUES (1259668868, 'Nikolaras', 'Emp6', 'Kolokotroni', 40, 16232, 15000, 2107726996, 6944255663, 88888888888);

INSERT INTO owners 
VALUES (15519831131, 'Nikiforaki', 19, 47217);

INSERT INTO owners 
VALUES (12345678900, 'Archimidous', 1, 47217);

INSERT INTO owners 
VALUES (24224563987, 'Athanasiou Diakou', 21, 30155);

INSERT INTO owners 
VALUES (12233221456, 'Hrwwn Polytexneiou', 100, 15772);

INSERT INTO owners 
VALUES (98765432100, 'Themistokleous', 6, 47001);

INSERT INTO owners
VALUES (11223344556, 'Iokastis', 3, 22122);

SHOW TRIGGERS IN Company;

# DROP VIEW client_info;
CREATE OR REPLACE VIEW client_info AS
	SELECT clients.ClientRegistrationNo, clients.FirstName, clients.LastName, clients.RegistrationDate
	FROM clients;

# DROP VIEW client_total_info;	
CREATE OR REPLACE VIEW client_total_info AS
	SELECT clients.ClientRegistrationNo, clients.FirstName, clients.LastName, clients.RegistrationDate, COUNT(*) AS HousesRented, SUM(contracts.Rent)
	FROM clients, contracts
	WHERE clients.ClientRegistrationNo = contracts.ClientRegistrationNo 
	GROUP BY clients.ClientRegistrationNo;

# queries
# First
SELECT owners.SSN, properties.PropertyRegistrationNo, private_owners.FirstName, private_owners.LastName , properties.Rent
FROM owners JOIN properties JOIN private_owners
ON owners.SSN = properties.OwnerSSN AND private_owners.SSN = owners.SSN;

# Second
SELECT owners.SSN, properties.PropertyRegistrationNo, business_owners.BusinessName , properties.Rent
FROM owners JOIN properties JOIN business_owners
ON owners.SSN = properties.OwnerSSN AND business_owners.SSN = owners.SSN;

# Third
SELECT clients.FirstName, clients.LastName, contracts.Rent, properties.PropertyRegistrationNo, properties.Addr_StreetName, properties.Addr_StreetNo, properties.Addr_PostalCode 
FROM clients JOIN properties JOIN contracts
ON contracts.PropertyRegistrationNo = properties.PropertyRegistrationNo AND contracts.ClientRegistrationNo = clients.ClientRegistrationNo;

# Fourth
SELECT COUNT(*), SUM(Salary), AVG(Salary), MAX(Salary)
FROM employees;

# Fifth
SELECT clients.ClientRegistrationNo, clients.FirstName, clients.LastName ,COUNT(*)
FROM clients, contracts
WHERE clients.ClientRegistrationNo = contracts.ClientRegistrationNo
GROUP BY clients.ClientRegistrationNo;

# Sixth
SELECT employees.SSN, employees.FirstName, employees.LastName ,COUNT(*)
FROM employees, clients
WHERE employees.SSN = clients.RegisteredBy
GROUP BY employees.SSN;

# 7th
SELECT owners.SSN, private_owners.FirstName, private_owners.LastName ,COUNT(*)
FROM private_owners JOIN owners ON private_owners.SSN = owners.SSN , properties
WHERE properties.OwnerSSN = owners.SSN
GROUP BY owners.SSN;

# 8th
SELECT owners.SSN, business_owners.BusinessName ,COUNT(*)
FROM business_owners JOIN owners ON business_owners.SSN = owners.SSN , properties
WHERE properties.OwnerSSN = owners.SSN
GROUP BY owners.SSN;

# 9th
SELECT employees.FirstName, employees.LastName, employees.Salary
FROM employees
ORDER BY employees.Salary DESC;

# 10th
SELECT properties.PropertyRegistrationNo, properties.Rent
FROM properties
WHERE properties.PropertyRegistrationNo NOT IN 
			(SELECT contracts.PropertyRegistrationNo 
			  FROM contracts)			
ORDER BY properties.Rent ASC;

# 11th
SELECT business_owners.BusinessName ,COUNT(*)
FROM business_owners JOIN owners ON business_owners.SSN = owners.SSN , properties
WHERE properties.OwnerSSN = owners.SSN
GROUP BY owners.SSN
HAVING COUNT(*) > 5;

# 12th
SELECT private_owners.FirstName, private_owners.LastName ,COUNT(*)
FROM private_owners JOIN owners ON private_owners.SSN = owners.SSN , properties
WHERE properties.OwnerSSN = owners.SSN
GROUP BY owners.SSN
HAVING COUNT(*) > 5;

# 13th
SELECT clients.FirstName, clients.LastName ,COUNT(*)
FROM clients, contracts
WHERE clients.ClientRegistrationNo = contracts.ClientRegistrationNo
GROUP BY clients.ClientRegistrationNo
HAVING COUNT(*) > 5;

# 14th
SELECT employees.FirstName, employees.LastName, employees.Salary
FROM employees
WHERE employees.Salary > (SELECT AVG(Salary)
						  FROM employees );

# 15th
SELECT clients.FirstName, clients.LastName
FROM clients
WHERE clients.ClientRegistrationNo NOT IN (SELECT DISTINCT contracts.ClientRegistrationNo
										   FROM contracts );
										  
# 16th 
SELECT properties.PropertyRegistrationNo, property_types.Rooms, properties.Rent
FROM properties JOIN property_types
WHERE properties.PropertyRegistrationNo NOT IN (SELECT contracts.PropertyRegistrationNo FROM contracts)			
GROUP BY property_types.Rooms
ORDER BY property_types.Rooms ASC;

# DELETE FROM property_types WHERE PropertyTypeID=2;
# DELETE FROM employees WHERE SSN=1;
# SELECT * FROM employees;
# INSERT INTO property_types VALUES(NULL, 'DDEWQEQ3WER3WQsdfdsfsdfsdfadadadadada', -1);
# Update employees SET SSN=1, FirstName='George', LastName='Taylor', Addr_StreetName=NULL, Addr_StreetNo=NULL, Addr_PostalCode=NULL, Salary=30000, WorkPhoneNumber=10, MobilePhoneNumber=NULL, SupervisorSSN=NULL WHERE SSN = 1
